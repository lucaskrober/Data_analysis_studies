# ------ Base R approach -------
# Base package is sufficient to do data manipulation
# it includes standard R packages: stats, utils and graphics

mtcars
mtcars[mtcars$am == 1,]

# ------- What is R package -------
# R packages are collections of functions
# and data sets developed by the community. They increase the
# power of R by improving existing base R functionalities, or
# by adding new ones. For example, if you are usually working
#with data frames, probably you will have heard about dplyr or
# data.table, two of the most popular R packages.

# ------- Tidyverse -----------
# Tidyverse is a set of packages that are designed to simplify
# the data manipulation.
# Tidyverse approach is based on the concept of "tidy data"
# Tidyverse was proposed in 2014
# Some facts about Tidyverse:
# 1. the core of Tidyverse is developed by RStudio
# 2. it seems like it will have a long term support
# 3. it is developed openly on GitHub
# 4. it cpntaines validated R packages (the result is validated)
# 
# Advantages that Tidyverse provide can be summarized in 3 categories:
# 1. Import of data
# 2. Manipulation with data
# 3. Visualization of data

# ------ Import of data -------
# - 'readr' library is designed to import rectangular tabulated data (.csv, .tsv, etc.)
# - 'readxl' libraryis designed to import Excel .xls and .xlsx files as simple as import .csv.
# - 'haven' library allows to import SAS, SPSS and Stata files

# ------ Data manipulation -------
# - Tidyverse uses %>% (pipe) operator for chaning subsiquent operations during data manipulation
# - 'dplyr' library provides tools for most of the needs (subsetting, filtering, summarizing)

# ------ Data visualization -------
# - 'ggplot2' library uses "grammar of graphics" idea to plot complex static charts easily
# - 'htmlwidget' library allows to create interactive charts for the web
# - 'shiny' library allows to built web interactive web app using R

# ------- Example of ggplot2 ------
library(tidyverse)
library(ggmap)

# Load the college dataset
college <- read_csv("data/college.csv") ## loading a dataset

# Load state information
counties <- map_data("county") # loading a position of counties
CAcounties <- counties %>%
  filter(region=="california") %>%
  mutate(group=as.factor(group)) # filtering only counties of the state of California
rm(counties)

# Ploting a map with data
ggplot() +
  geom_polygon(data=CAcounties, aes(x=long,y=lat, group=group), fill="beige",colour="grey") +
  coord_map() +
  theme_void() +
  geom_point(data=college,mapping=aes(x=lon,y=lat,size=undergrads,colour=control), alpha=.6) +
  ggtitle("Most California colleges located in large cities",
          subtitle="Sourse: U.S. Departament of Education") +
  scale_fill_manual(guide=guide_legend(title="test"))

# ------ Updating tidyverse ---------
# The package doesn't have a regular update frequency
# Use function tidyverse_update() to check if there are updates available

tidyverse_update()

# -------- %>% operator --------
#
# %>% is called a pipe operator
#
# Example of pipe:

1:9 %>%
  mean()

# Pipe operator is a 'sintactic sugar' for chaining operations together.
# The term 'sintactic sugar' represents a code that is specially designed
# to humans to easier read/write a code.
# 'Sintactic sugar' is designed in order for the programmer to focus more
# on the meaning of the operation rather than the way it should be written

# The real code is:

mean(1:9)

# More complex example:

1:9 %>%
  sqrt() %>%
  cosh() %>%
  diff() %>%
  log(base=2) %>%
  .^2 %>% # WHAT??? Period?
  length() %>%
  rep('Hello, world',.) # WHAT??? Period again?

  
# The pipe operator ALWAYS forces the previously evaluated expressions to be passed
# as FIRST ARGUMENT for the consequetive function.
#
# To use the previously evaluated expressions as the second argument, the . operator
# is used
#
# The .[[1]] notation is used in order to extract data in a form of vector:

midwest %>%
  select(state) %>%
  unique() %>%
  .[[1]]

# Alternative pipe operators are %T>%, %$% and %<>%

# ------ Importing data from Excel ---------

# 'readxl' library provides a tool for easily importing Excel files (.xls and .xlsx) into R.
# 'readxl' library is a part of 'tidyverse' but it doesn't load automatically and need to be
# load manualy

library(readxl)

students.xlsx <- read_excel("data/lista_de_Presenca.xlsx",
           sheet="alunos",
           range="C4:F20",
           skip=1)
colnames(students.xlsx) <- make.names(colnames(students.xlsx))

students.xlsx %>%
  select(Programa) %>%
  unique()

# 'readr' library allows faster and easier to import .csv and .tsv files.
# It will not convert strings into factors as read.csv() of base-R

# Check the differences in import functions:

# read.csv() from 'Base' library

students.baseR <- read.csv("data/lista_de_Presenca.csv")
students.baseR <- read.csv("data/lista_de_Presenca.csv", skip=2)
students.baseR$Nome.do.aluno
class(students.baseR$Nome.do.aluno)
students.baseR$Nome.do.aluno <- as.character(students.baseR$Nome.do.aluno)
class(students.baseR$Nome.do.aluno)
students.baseR$Nome.do.aluno

# read_csv() from 'readr' library

students.readr <- read_csv("data/lista_de_Presenca.csv", skip=2)
students.readr
students.readr$'Nome do aluno'
class(students.readr$'Nome do aluno')

class(students.baseR)
class(students.readr)

students.baseR[[1]]
students.readr[[1]]

students.baseR[1]
students.readr[1]

students.baseR[,1]
students.readr[,1]

# ------- What are Tibbles -------
#
# There are 3 similar objects that can store rectangular data:
# - data.frame from baseR
# - tibble from 'tidyverse'
# - data.table form 'data.table' library that is optimized for very big tables. The processing of data
# in the data.table is different than in both tibble and data.frame
# - matrices only can store data of the same type

# Tibbles stores more information about the data:

students.readr
students.readr %>%
  group_by(Programa) %>%
  class()

# How to create tibbles:
# - Tibbles are autamatically created by funtions from 'tidyverse' library like read_csv()
# - using tibble() function
# - converting data.frame into tibble using as.tibble() function

# ------ Data manipulation in tibbles ------
#
# 'dplyr' library provides necessary functions (think as verbs) to
# - filter,
# - select,
# - mutate,
# - separate
# data from a tibble

# Select columns from the tibble
students.readr %>%
  select(Programa, Período) %>%
  unique()

# Filtering data
students.readr %>%
  filter(Período == "Manhã" & Programa == 'PPGEc') %>%
  select(`Nome do aluno`:Programa) %>%
  select(-Programa) %>%
  .[[2]]

# Mutating data
# In this example str_to_upper() function will be used and it is a part of 'stringr' library that is
# a part of 'tidyverse'
students.readr %>%
  mutate(Período = as.factor(Período),`Nome do aluno` = str_to_upper(`Nome do aluno`)) %>%
  mutate(nchar = nchar(`Nome do aluno`))

# Separating data
students.readr %>%
  separate(`Nome do aluno`, c("Name","Surname"), sep=" ")

students.readr %>%
  separate(`Nome do aluno`, c("Name","Surname"), sep=" ", extra="merge")

# Filtering rows with NA

students.readr %>%
  select('e-mail') %>%
  filter(grep("@gmail.com",.))
  mutate(`e-mail` == ifelse(select(`e-mail`)), c("Name","Surname"), sep=" ", extra="merge")

# Sample from the tibble

students.readr %>%
  sample_frac(.3) # returns 30% of all observations

students.readr %>%
  sample_n(5) # returns 5 observations randomly selected from all observations

students.readr %>%
  group_by(Programa) %>%
  sample_n(3) # wants to return 3 observations from each group

students.readr %>%
  group_by(Programa) %>%
  sample_n(3, replace=TRUE) # returns 3 observations from each group with replacement

# ------ Grouping in tidyverse -------

# Grouping is a special feature of 'tidyverse' data.frame - tibble.
# Operations like:
# - select,
# - filter,
# - sample,
# and othres can be applied within groups created by group_by() function.

# The grouped columns never get dropped off
students.readr %>%
  group_by(Programa) %>%
  select(`Nome do aluno`,`e-mail`)

# Sampling from each group
college %>%
  group_by(control) %>%
  sample_n(5)

college %>%
  group_by(control) %>%
  sample_frac(.1)

# Ungrouping
college %>%
  group_by(control) %>%
  sample_n(5) %>%
  ungroup()

# Calclulating number of items in each group
# n() is a spectial function of 'dplyr' library that calculates number of rows (items) within
# each group of a grouped tibble
students.readr %>%
  group_by(Programa) %>%
  mutate(numberOfStudents=n()) %>%
  select(numberOfStudents) %>%
  unique()

# The shortcut for the above code is using summarize() function
students.readr %>%
  group_by(Programa) %>%
  summarize(numberOfStudents=n())

# Calculating cumulative sums
students.readr %>%
  mutate(n_char=nchar(`e-mail`)) %>%
  group_by(Período) %>%
  mutate(cum.sum=cumsum(n_char)) %>%
  mutate(cum.mean=cummean(n_char)) %>%
  ggplot() +
  geom_line(aes(x=1:nrow(students.readr),y=cum.sum,color=Período))
  

students.readr %>%
  mutate(nchar=nchar(`e-mail`)) %>%
  arrange(nchar)
